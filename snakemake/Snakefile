configfile: "config.json"
threads: 1
# -----------------------------------------------------------------------------
# Setup
# -----------------------------------------------------------------------------
DATASET = os.path.splitext(os.path.basename(config["dataset"]))[0]
REPRESENTATIONS = config["representations"]
SEEDS = config["seeds"]
FOLDS = config["folds"]
METRICS = config["metrics"]
OUTPUT_DIR = config['output_dir']
MODEL_PARAMS = config['model_params']
ERR_PPM = config['err_ppm']

shell.executable("/bin/bash")


# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# Rules
# -----------------------------------------------------------------------------
rule all:
    input:
        ranks_file_formula=expand(f"{OUTPUT_DIR}/prior/structural_prior/{DATASET}_{{repr}}_{{fold}}_{{seed}}_CV_ranks_formula.csv.gz",
                       repr=REPRESENTATIONS, seed=SEEDS, fold=range(FOLDS)),
        ranks_file_structure=expand(f"{OUTPUT_DIR}/prior/structural_prior/{DATASET}_{{repr}}_{{fold}}_{{seed}}_CV_ranks_structure.csv.gz",
                   repr=REPRESENTATIONS, seed=SEEDS, fold=range(FOLDS)),
        tc_file=expand(f"{OUTPUT_DIR}/prior/structural_prior/{DATASET}_{{repr}}_{{fold}}_{{seed}}_CV_tc.csv.gz",
                   repr=REPRESENTATIONS, seed=SEEDS, fold=range(FOLDS)),
        unique_masses_file=expand(f"{OUTPUT_DIR}/prior/samples/{DATASET}_{{repr}}_{{fold}}_unique_masses.csv",
                    repr=REPRESENTATIONS, seed=SEEDS, fold=range(FOLDS)),
        processed_file=expand(f"{OUTPUT_DIR}/prior/samples/{DATASET}_{{repr}}_processed_{{metric}}.csv", repr=REPRESENTATIONS, metric=METRICS)

rule preprocess:
    input:
        f"{config['dataset']}"
    output:
        f"{OUTPUT_DIR}/prior/raw/{{dataset}}.txt"
    resources:
        mem_mb=12000,
        runtime=30,
    shell:
        'nps preprocess '
        '--input-file {input} '
        '--output-file {output} '
        '--max-input-smiles {config[max_input_smiles]} '


rule create_training_sets:
    input:
        f"{OUTPUT_DIR}/prior/raw/{{dataset}}.txt"
    output:
        train_file = f"{OUTPUT_DIR}/prior/inputs/train_{{dataset}}_{{repr}}_{{fold}}_{{seed}}.smi",
        vocab_file = f"{OUTPUT_DIR}/prior/inputs/train_{{dataset}}_{{repr}}_{{fold}}_{{seed}}.vocabulary",
        test_file = f"{OUTPUT_DIR}/prior/inputs/test_{{dataset}}_{{repr}}_{{fold}}_{{seed}}.smi"
    resources:
        mem_mb=20000,
        runtime=10,
    shell:
        'nps create_training_sets '
        '--input-file {input} '
        '--train-file {output.train_file} '
        '--vocab-file {output.vocab_file} '
        '--test-file {output.test_file} '
        '--enum-factor {MODEL_PARAMS[enum_factor]} '
        '--folds {FOLDS} '
        '--representation {wildcards.repr} '
        '--seed {wildcards.seed} '
        '--max-input-smiles {config[max_input_smiles]} '


rule train_models_RNN:
    input:
        input_file=f"{OUTPUT_DIR}/prior/inputs/train_{{dataset}}_{{repr}}_{{fold}}_{{seed}}.smi",
        vocab_file=f"{OUTPUT_DIR}/prior/inputs/train_{{dataset}}_{{repr}}_{{fold}}_{{seed}}.vocabulary"
    output:
        smiles_file=f"{OUTPUT_DIR}/prior/models/{{dataset}}_{{repr}}_{{fold}}_{{seed}}_SMILES.smi",
        model_file=f"{OUTPUT_DIR}/prior/models/{{dataset}}_{{repr}}_{{fold}}_{{seed}}_model.pt",
        loss_file=f"{OUTPUT_DIR}/prior/models/{{dataset}}_{{repr}}_{{fold}}_{{seed}}_loss.csv",
        time_file=f"{OUTPUT_DIR}/prior/models/{{dataset}}_{{repr}}_{{fold}}_{{seed}}_timing.csv"
    resources:
        mem_mb=32000,
        runtime=MODEL_PARAMS["max_epochs"]*120,
        slurm_extra="--gres=gpu:1"
    shell:
            'python ../python/inner-train-models-RNN.py '
            '--database {wildcards.dataset} '
            '--representation {wildcards.repr} '
            '--enum_factor {MODEL_PARAMS[enum_factor]} '
            '--n_molecules {MODEL_PARAMS[n_molecules]} '
            '--min_tc {MODEL_PARAMS[min_tc]} '
            '--sample_idx {wildcards.seed} '
            '--rnn_type {MODEL_PARAMS[rnn_type]} '
            '--embedding_size {MODEL_PARAMS[embedding_size]} '
            '--hidden_size {MODEL_PARAMS[hidden_size]} '
            '--n_layers {MODEL_PARAMS[n_layers]} '
            '--dropout {MODEL_PARAMS[dropout]} '
            '--batch_size {MODEL_PARAMS[batch_size]} '
            '--learning_rate {MODEL_PARAMS[learning_rate]} '
            '--max_epochs {MODEL_PARAMS[max_epochs]} '
            '--patience {MODEL_PARAMS[patience]} '
            '--log_every_steps {MODEL_PARAMS[log_every_steps]} '
            '--log_every_epochs {MODEL_PARAMS[log_every_epochs]} '
            '--sample_mols {MODEL_PARAMS[sample_mols]} '
            '--input_file {input.input_file} '
            '--vocab_file {input.vocab_file} '
            '--smiles_file {output.smiles_file} '
            '--model_file {output.model_file} '
            '--loss_file {output.loss_file} '
            '--time_file {output.time_file} '


rule sample_molecules_RNN:
    input:
        input_file=f"{OUTPUT_DIR}/prior/models/{{dataset}}_{{repr}}_{{fold}}_{{seed}}_SMILES.smi",
        vocab_file=f"{OUTPUT_DIR}/prior/inputs/train_{{dataset}}_{{repr}}_{{fold}}_{{seed}}.vocabulary",
        model_file=f"{OUTPUT_DIR}/prior/models/{{dataset}}_{{repr}}_{{fold}}_{{seed}}_model.pt",
        check_file=f"{OUTPUT_DIR}/prior/models/{{dataset}}_{{repr}}_{{fold}}_{{seed}}_timing.csv"
    output:
        output_file=f"{OUTPUT_DIR}/prior/samples/{{dataset}}_{{repr}}_{{fold}}_{{seed}}_sample_1.csv",
        time_file=f"{OUTPUT_DIR}/prior/samples/{{dataset}}_{{repr}}_{{fold}}_{{seed}}_timing_1.csv"
    resources:
        mem_mb=1000,
        runtime=MODEL_PARAMS["sample_mols"]//10000,
        slurm_extra="--gres=gpu:1"
    shell:
        'python ../python/inner-sample-molecules-RNN.py '
        '--database {wildcards.dataset} '
        '--representation {wildcards.repr} '
        '--enum_factor {MODEL_PARAMS[enum_factor]} '
        '--n_molecules {MODEL_PARAMS[n_molecules]} '
        '--min_tc {MODEL_PARAMS[min_tc]} '
        '--sample_idx {wildcards.seed} '
        '--rnn_type {MODEL_PARAMS[rnn_type]} '
        '--embedding_size {MODEL_PARAMS[embedding_size]} '
        '--hidden_size {MODEL_PARAMS[hidden_size]} '
        '--n_layers {MODEL_PARAMS[n_layers]} '
        '--dropout {MODEL_PARAMS[dropout]} '
        '--batch_size {MODEL_PARAMS[batch_size]} '
        '--learning_rate {MODEL_PARAMS[learning_rate]} '
        '--mol_sample_idx {wildcards.seed} '
        '--sample_mols {MODEL_PARAMS[sample_mols]} '
        '--input_file {input.input_file} '
        '--vocab_file {input.vocab_file} '
        '--model_file {input.model_file} '
        '--check_file {input.check_file} '
        '--output_file {output.output_file} '
        '--time_file {output.time_file} '


rule tabulate_molecules:
    input:
        input_file=f"{OUTPUT_DIR}/prior/samples/{{dataset}}_{{repr}}_{{fold}}_{{seed}}_sample_1.csv",
        train_file=f"{OUTPUT_DIR}/prior/inputs/train_{{dataset}}_{{repr}}_{{fold}}_{{seed}}.smi",
    output:
        output_file=f"{OUTPUT_DIR}/prior/samples/{{dataset}}_{{repr}}_{{fold}}_{{seed}}_sample_1_masses.csv",
    resources:
        mem_mb=4000,
        runtime=MODEL_PARAMS["sample_mols"]//1000,
    shell:
        'python ../python/inner-tabulate-molecules.py '
        '--input_file {input.input_file} '
        '--train_file {input.train_file} '
        '--representation {wildcards.repr} '
        '--output_file {output.output_file} '


rule collect_tabulated_molecules:
    input:
        input_files=expand(f"{OUTPUT_DIR}/prior/samples/{{dataset}}_{{repr}}_{{fold}}_{{seed}}_sample_1_masses.csv", seed=SEEDS, allow_missing=True)
    output:
        output_file=f"{OUTPUT_DIR}/prior/samples/{{dataset}}_{{repr}}_{{fold}}_unique_masses.csv",
    resources:
        mem_mb=4000,
        runtime=MODEL_PARAMS["sample_mols"]//1000,
    shell:
        'python ../python/inner-collect-tabulated-molecules.py '
        '--input_files {input.input_files} '
        '--output_file {output.output_file} '


rule process_tabulated_molecules:
    input:
        input_file=expand(f"{OUTPUT_DIR}/prior/samples/{DATASET}_{{repr}}_{{fold}}_unique_masses.csv", repr=REPRESENTATIONS, fold=range(FOLDS)),
        cv_file=expand(f"{OUTPUT_DIR}/prior/inputs/train_{DATASET}_{{repr}}_{{fold}}_{{seed}}.smi", repr=REPRESENTATIONS, seed=SEEDS, fold=range(FOLDS))
    params:
        summary_fn=lambda wildcards, output: os.path.splitext(os.path.basename(output.output_file[0]))[0].split('_')[-1]
    output:
        output_file=expand(f"{OUTPUT_DIR}/prior/samples/{DATASET}_{{repr}}_processed_{{metric}}.csv", repr=REPRESENTATIONS, allow_missing=True),
    resources:
        mem_mb=4000,
        runtime=MODEL_PARAMS["sample_mols"]//1000,
    shell:
        'python ../python/inner-process-tabulated-molecules.py '
        '--input_file {input.input_file} '
        '--cv_file {input.cv_file} '
        '--output_file {output.output_file} '
        '--summary_fn {params.summary_fn} '


rule write_structural_prior_CV:
    """
    For each seed, generate structural prior information across all seeds
    and across all folds.
    For all given training smiles, we keep track of smiles generated by the
    model (and also pubchem, as a baseline) that fall within some
    tolerance of the (correct) molecular weight. When sorted by decreasing
    sampling frequency, the rank at which we find the "correct" smile
    (in terms of fingerprint similarity to the training molecule), gives us the
    "rank" of each training smile. Lower ranks indicate a better model.
    """
    input:
        train_file=f"{OUTPUT_DIR}/prior/inputs/train_{{dataset}}_{{repr}}_{{fold}}_{{seed}}.smi",
        test_file=f"{OUTPUT_DIR}/prior/inputs/test_{{dataset}}_{{repr}}_{{fold}}_{{seed}}.smi",
        pubchem_file=config['pubchem_tsv_file'],
        sample_file=f"{OUTPUT_DIR}/prior/samples/{{dataset}}_{{repr}}_{{fold}}_{{seed}}_sample_1_masses.csv"
    output:
         ranks_file=f"{OUTPUT_DIR}/prior/structural_prior/{{dataset}}_{{repr}}_{{fold}}_{{seed}}_CV_ranks_structure.csv.gz",
         tc_file=f"{OUTPUT_DIR}/prior/structural_prior/{{dataset}}_{{repr}}_{{fold}}_{{seed}}_CV_tc.csv.gz"
    resources:
        mem_mb=32000,
        runtime=180,
    shell:
        'python ../python/inner-write-structural-prior-CV.py '
        '--sample_idx {wildcards.seed} '
        '--output_dir {OUTPUT_DIR}/prior/structural_prior/ '
        '--ranks_file {output.ranks_file} '
        '--tc_file {output.tc_file} '
        '--train_file {input.train_file} '
        '--test_file {input.test_file} '
        '--pubchem_file {input.pubchem_file} '
        '--sample_file {input.sample_file} '
        '--err_ppm {ERR_PPM} '


rule write_formula_prior_CV:
    input:
        train_file=f"{OUTPUT_DIR}/prior/inputs/train_{{dataset}}_{{repr}}_{{fold}}_{{seed}}.smi",
        test_file=f"{OUTPUT_DIR}/prior/inputs/test_{{dataset}}_{{repr}}_{{fold}}_{{seed}}.smi",
        pubchem_file=config['pubchem_tsv_file'],
        sample_file=f"{OUTPUT_DIR}/prior/samples/{{dataset}}_{{repr}}_{{fold}}_{{seed}}_sample_1_masses.csv"
    output:
         ranks_file=f"{OUTPUT_DIR}/prior/structural_prior/{{dataset}}_{{repr}}_{{fold}}_{{seed}}_CV_ranks_formula.csv.gz"
    resources:
        mem_mb=32000,
        runtime=180,
    shell:
        'python ../python/inner-write-formula-prior-CV.py '
        '--output_dir {OUTPUT_DIR}/prior/structural_prior '
        '--ranks_file {output.ranks_file} '
        '--train_file {input.train_file} '
        '--test_file {input.test_file} '
        '--pubchem_file {input.pubchem_file} '
        '--sample_file {input.sample_file} '
        '--err_ppm {ERR_PPM} '
