configfile: "config.json"
threads: 1
# -----------------------------------------------------------------------------
# Setup
# -----------------------------------------------------------------------------
DATASETS = config["datasets"]
DATASETS_FOLDER = config["datasets_folder"]
REPRESENTATIONS = config["representations"]
SEED = config["seed"]
FOLDS = config["folds"]
OUTPUT_DIR = config['output_dir']
MODEL_PARAMS = config['model_params']
ERR_PPM = config['err_ppm']

shell.executable("/bin/bash")

wildcard_constraints:
    dataset="|".join(DATASETS)


# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# Rules
# -----------------------------------------------------------------------------
rule all:
    input:
        ranks_file_formula=expand(f"{OUTPUT_DIR}/prior/structural_prior/{{dataset}}_{{repr}}_seed{{seed}}_{{fold}}_CV_ranks_formula.csv.gz",
                       dataset=DATASETS, repr=REPRESENTATIONS, seed=SEED, fold=range(FOLDS)),
        ranks_file_structure=expand(f"{OUTPUT_DIR}/prior/structural_prior/{{dataset}}_{{repr}}_seed{{seed}}_{{fold}}_CV_ranks_structure.csv.gz",
                   dataset=DATASETS, repr=REPRESENTATIONS, seed=SEED, fold=range(FOLDS)),
        tc_file=expand(f"{OUTPUT_DIR}/prior/structural_prior/{{dataset}}_{{repr}}_seed{{seed}}_{{fold}}_CV_tc.csv.gz",
                   dataset=DATASETS, repr=REPRESENTATIONS, seed=SEED, fold=range(FOLDS))


rule preprocess:
    input:
        f"{DATASETS_FOLDER}/{{dataset}}.txt"
    output:
        f"{OUTPUT_DIR}/prior/raw/{{dataset}}.txt"
    shell:
        'nps preprocess '
        '--input-file {input} '
        '--output-file {output} '
        '--max-input-smiles {config[max_input_smiles]} '


rule create_training_sets:
    input:
        f"{OUTPUT_DIR}/prior/raw/{{dataset}}.txt"
    output:
        train_file = f"{OUTPUT_DIR}/prior/inputs/train_{{dataset}}_{{repr}}_seed{{seed}}_{{fold}}.smi",
        vocab_file = f"{OUTPUT_DIR}/prior/inputs/train_{{dataset}}_{{repr}}_seed{{seed}}_{{fold}}.vocabulary",
        test_file = f"{OUTPUT_DIR}/prior/inputs/test_{{dataset}}_{{repr}}_seed{{seed}}_{{fold}}.smi"
    shell:
        'nps create_training_sets '
        '--input-file {input} '
        '--train-file {output.train_file} '
        '--vocab-file {output.vocab_file} '
        '--test-file {output.test_file} '
        '--enum-factor {MODEL_PARAMS[enum_factor]} '
        '--folds {FOLDS} '
        '--representation {wildcards.repr} '
        '--seed {wildcards.seed} '
        '--max-input-smiles {config[max_input_smiles]} '


rule train_models_RNN:
    input:
        input_file=f"{OUTPUT_DIR}/prior/inputs/train_{{dataset}}_{{repr}}_seed{{seed}}_{{fold}}.smi",
        vocab_file=f"{OUTPUT_DIR}/prior/inputs/train_{{dataset}}_{{repr}}_seed{{seed}}_{{fold}}.vocabulary"
    output:
        smiles_file=f"{OUTPUT_DIR}/prior/models/{{dataset}}_{{repr}}_seed{{seed}}_{{fold}}_SMILES.smi",
        model_file=f"{OUTPUT_DIR}/prior/models/{{dataset}}_{{repr}}_seed{{seed}}_{{fold}}_model.pt",
        loss_file=f"{OUTPUT_DIR}/prior/models/{{dataset}}_{{repr}}_seed{{seed}}_{{fold}}_loss.csv",
        time_file=f"{OUTPUT_DIR}/prior/models/{{dataset}}_{{repr}}_seed{{seed}}_{{fold}}_timing.csv"
    shell:
            'python ../python/inner-train-models-RNN.py '
            '--database {wildcards.dataset} '
            '--representation {wildcards.repr} '
            '--enum_factor {MODEL_PARAMS[enum_factor]} '
            '--n_molecules {MODEL_PARAMS[n_molecules]} '
            '--min_tc {MODEL_PARAMS[min_tc]} '
            '--sample_idx {wildcards.seed} '
            '--rnn_type {MODEL_PARAMS[rnn_type]} '
            '--embedding_size {MODEL_PARAMS[embedding_size]} '
            '--hidden_size {MODEL_PARAMS[hidden_size]} '
            '--n_layers {MODEL_PARAMS[n_layers]} '
            '--dropout {MODEL_PARAMS[dropout]} '
            '--batch_size {MODEL_PARAMS[batch_size]} '
            '--learning_rate {MODEL_PARAMS[learning_rate]} '
            '--max_epochs {MODEL_PARAMS[max_epochs]} '
            '--patience {MODEL_PARAMS[patience]} '
            '--log_every_steps {MODEL_PARAMS[log_every_steps]} '
            '--log_every_epochs {MODEL_PARAMS[log_every_epochs]} '
            '--sample_mols {MODEL_PARAMS[sample_mols]} '
            '--input_file {input.input_file} '
            '--vocab_file {input.vocab_file} '
            '--smiles_file {output.smiles_file} '
            '--model_file {output.model_file} '
            '--loss_file {output.loss_file} '
            '--time_file {output.time_file} '


rule sample_molecules_RNN:
    input:
        input_file=f"{OUTPUT_DIR}/prior/models/{{dataset}}_{{repr}}_seed{{seed}}_{{fold}}_SMILES.smi",
        vocab_file=f"{OUTPUT_DIR}/prior/inputs/train_{{dataset}}_{{repr}}_seed{{seed}}_{{fold}}.vocabulary",
        model_file=f"{OUTPUT_DIR}/prior/models/{{dataset}}_{{repr}}_seed{{seed}}_{{fold}}_model.pt",
        check_file=f"{OUTPUT_DIR}/prior/models/{{dataset}}_{{repr}}_seed{{seed}}_{{fold}}_timing.csv"
    output:
        output_file=f"{OUTPUT_DIR}/prior/samples/{{dataset}}_{{repr}}_seed{{seed}}_{{fold}}_sample_1.csv",
        time_file=f"{OUTPUT_DIR}/prior/samples/{{dataset}}_{{repr}}_seed{{seed}}_{{fold}}_timing_1.csv"
    shell:
        'python ../python/inner-sample-molecules-RNN.py '
        '--database {wildcards.dataset} '
        '--representation {wildcards.repr} '
        '--enum_factor {MODEL_PARAMS[enum_factor]} '
        '--n_molecules {MODEL_PARAMS[n_molecules]} '
        '--min_tc {MODEL_PARAMS[min_tc]} '
        '--sample_idx {wildcards.seed} '
        '--rnn_type {MODEL_PARAMS[rnn_type]} '
        '--embedding_size {MODEL_PARAMS[embedding_size]} '
        '--hidden_size {MODEL_PARAMS[hidden_size]} '
        '--n_layers {MODEL_PARAMS[n_layers]} '
        '--dropout {MODEL_PARAMS[dropout]} '
        '--batch_size {MODEL_PARAMS[batch_size]} '
        '--learning_rate {MODEL_PARAMS[learning_rate]} '
        '--mol_sample_idx {wildcards.seed} '
        '--sample_mols {MODEL_PARAMS[sample_mols]} '
        '--input_file {input.input_file} '
        '--vocab_file {input.vocab_file} '
        '--model_file {input.model_file} '
        '--check_file {input.check_file} '
        '--output_file {output.output_file} '
        '--time_file {output.time_file} '

rule tabulate_molecules:
    input:
        input_file=f"{OUTPUT_DIR}/prior/samples/{{dataset}}_{{repr}}_seed{{seed}}_{{fold}}_sample_1.csv",
        train_file=f"{OUTPUT_DIR}/prior/inputs/train_{{dataset}}_{{repr}}_seed{{seed}}_{{fold}}.smi",
    output:
        output_file=f"{OUTPUT_DIR}/prior/samples/{{dataset}}_{{repr}}_seed{{seed}}_{{fold}}_sample_1_masses.csv",
    shell:
        'python ../python/inner-tabulate-molecules.py '
        '--input_file {input.input_file} '
        '--train_file {input.train_file} '
        '--representation {wildcards.repr} '
        '--output_file {output.output_file} '

rule write_structural_prior_CV:
    input:
        train_file=f"{OUTPUT_DIR}/prior/inputs/train_{{dataset}}_{{repr}}_seed{{seed}}_{{fold}}.smi",
        test_file=f"{OUTPUT_DIR}/prior/inputs/test_{{dataset}}_{{repr}}_seed{{seed}}_{{fold}}.smi",
        pubchem_file=config['pubchem_gz_file'],
        sample_file=f"{OUTPUT_DIR}/prior/samples/{{dataset}}_{{repr}}_seed{{seed}}_{{fold}}_sample_1_masses.csv"
    output:
         ranks_file=f"{OUTPUT_DIR}/prior/structural_prior/{{dataset}}_{{repr}}_seed{{seed}}_{{fold}}_CV_ranks_structure.csv.gz",
         tc_file=f"{OUTPUT_DIR}/prior/structural_prior/{{dataset}}_{{repr}}_seed{{seed}}_{{fold}}_CV_tc.csv.gz"
    shell:
        'python ../python/inner-write-structural-prior-CV.py '
        '--sample_idx {wildcards.seed} '
        '--output_dir {OUTPUT_DIR}/prior/structural_prior/ '
        '--ranks_file {output.ranks_file} '
        '--tc_file {output.tc_file} '
        '--train_file {input.train_file} '
        '--test_file {input.test_file} '
        '--pubchem_file {input.pubchem_file} '
        '--sample_file {input.sample_file} '
        '--err_ppm {ERR_PPM} '


rule write_formula_prior_CV:
    input:
        train_file=f"{OUTPUT_DIR}/prior/inputs/train_{{dataset}}_{{repr}}_seed{{seed}}_{{fold}}.smi",
        test_file=f"{OUTPUT_DIR}/prior/inputs/test_{{dataset}}_{{repr}}_seed{{seed}}_{{fold}}.smi",
        pubchem_file=config['pubchem_gz_file'],
        sample_file=f"{OUTPUT_DIR}/prior/samples/{{dataset}}_{{repr}}_seed{{seed}}_{{fold}}_sample_1_masses.csv"
    output:
         ranks_file=f"{OUTPUT_DIR}/prior/structural_prior/{{dataset}}_{{repr}}_seed{{seed}}_{{fold}}_CV_ranks_formula.csv.gz"
    shell:
        'python ../python/inner-write-formula-prior-CV.py '
        '--output_dir {OUTPUT_DIR}/prior/structural_prior '
        '--ranks_file {output.ranks_file} '
        '--train_file {input.train_file} '
        '--test_file {input.test_file} '
        '--pubchem_file {input.pubchem_file} '
        '--sample_file {input.sample_file} '
        '--err_ppm {ERR_PPM} '
